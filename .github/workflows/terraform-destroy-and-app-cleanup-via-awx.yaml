---
name: Terraform Apply and AWX Resource Creation

on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of runner to use for the job.
        default: github-arc-runners
        type: string
      infra-directory:
        description: The directory containing the Terraform code.
        default: infra
        type: string
      ansible-directory:
        description: The directory containing the Ansible code.
        default: ansible
        type: string
      environment:
        description: The deployment environment (e.g., test, prod).
        default: test
        type: string
      awx-resource-deletion-playbook:
        description: The playbook to run for AWX resource deletion.
        type: string
        required: true
      awx-undeploy-template-name:
        description: The name of the AWX undeploy template.
        type: string
        required: true
      ref:
        description: The Git reference (branch, tag, or SHA) to check out.
        default: ""
        type: string
    secrets:
      VAULT_URL:
        description: The URL of the Vault server.
        required: true
      VAULT_TOKEN:
        description: The token for accessing the Vault server.
        required: true

jobs: 
  destroy-app-cleanup:
    name: AWX Resource Cleanup
    uses: Knighten-Homelab/gha-reusable-workflows/.github/workflows/awx-launch-job-template.yaml@main
    with:
      runs-on: ${{ inputs.runs-on }}
      awx-job-template-name: ${{ inputs.awx-undeploy-template-name }}
    secrets:
      VAULT_URL: ${{ secrets.VAULT_URL }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

  destroy-awx-resources:
    name: Delete AWX Resources
    uses: Knighten-Homelab/gha-reusable-workflows/.github/workflows/awx-resource-playbook-execution.yaml@main
    needs:
      - destroy-app-cleanup
    with:
      ansible-directory: ${{ inputs.ansible-directory }}
      environment: ${{ inputs.environment }}
      awx-resource-playbook: ${{ inputs.awx-resource-deletion-playbook }}
      ref: ${{ github.head_ref }}
    secrets:
      VAULT_URL: ${{ secrets.VAULT_URL }}
      VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ${{ inputs.runs-on }}
    needs:
      - destroy-awx-resources
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.infra-directory }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref != '' && inputs.ref || github.ref }}

      - name: Install Node.js (Dependency For Other Action)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            kv/data/homelab-pve-ci-agent token-id | PVE_API_TOKEN_ID ;
            kv/data/homelab-pve-ci-agent token-secret | PVE_API_TOKEN_SECRET ;
            kv/data/pdns ci_api_key | PDNS_API_KEY ;
            kv/data/homelab-ansible-sa ssh-key-private | PVE_CI_SSH_PRIVATE_KEY ;
            kv/data/homelab-ansible-sa ssh-key-public | PVE_CI_SSH_PUBLIC_KEY ;
            kv/data/homelab-minio-tf bucket | MINIO_TF_STATE_BUCKET ;
            kv/data/homelab-minio-tf access | MINIO_ACCESS_KEY ;
            kv/data/homelab-minio-tf secret | MINIO_SECRET_KEY ;
            kv/data/homelab-minio-tf endpoint | MINIO_ENDPOINT ;

      - name: Terraform Init
        env:
          AWS_ENDPOINT_URL_S3: ${{ steps.import-secrets.outputs.MINIO_ENDPOINT }}
          AWS_ACCESS_KEY_ID: ${{ steps.import-secrets.outputs.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.import-secrets.outputs.MINIO_SECRET_KEY}}
          AWS_S3_STATE_BUCKET: ${{ steps.import-secrets.outputs.MINIO_TF_STATE_BUCKET }}
          PM_API_TOKEN_ID: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_ID }}
          PM_API_TOKEN_SECRET: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_SECRET }}
          TF_VAR_pdns_api_key: ${{ steps.import-secrets.outputs.PDNS_API_KEY }}
          TF_VAR_pve_ci_ssh_private_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PRIVATE_KEY }}
          TF_VAR_pve_ci_ssh_public_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PUBLIC_KEY }}
        run: |
          terraform init -backend-config="bucket=${AWS_S3_STATE_BUCKET}"

      - name: Terraform Destroy
        env:
          AWS_ENDPOINT_URL_S3: ${{ steps.import-secrets.outputs.MINIO_ENDPOINT }}
          AWS_ACCESS_KEY_ID: ${{ steps.import-secrets.outputs.MINIO_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.import-secrets.outputs.MINIO_SECRET_KEY}}
          AWS_S3_STATE_BUCKET: ${{ steps.import-secrets.outputs.MINIO_TF_STATE_BUCKET }}
          PM_API_TOKEN_ID: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_ID }}
          PM_API_TOKEN_SECRET: ${{ steps.import-secrets.outputs.PVE_API_TOKEN_SECRET }}
          TF_VAR_pdns_api_key: ${{ steps.import-secrets.outputs.PDNS_API_KEY }}
          TF_VAR_pve_ci_ssh_private_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PRIVATE_KEY }}
          TF_VAR_pve_ci_ssh_public_key: ${{ steps.import-secrets.outputs.PVE_CI_SSH_PUBLIC_KEY }}
        run: |
          terraform destroy -var-file=envs/${{ inputs.environment }}.tfvars -auto-approve
