---
  name: Launch AWX Job Template
  
  on:
    workflow_call:
      inputs:
        runs-on:
          description: The type of runner to use for the job.
          default: github-arc-runners
          type: string
        awx-job-template-name:
          description: The name of the AWX job template.
          type: string
          required: true
      secrets:
        VAULT_URL:
          description: The URL of the Vault server.
          required: true
        VAULT_TOKEN:
          description: The token for accessing the Vault server.
          required: true
  
  jobs:
    launch-job-template:
      name: Launch AWX Job Template
      runs-on: ${{ inputs.runs-on }}
      permissions:
        contents: read
      steps:
      - name: Import Secrets
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            kv/data/awx host | AWX_HOST ;
            kv/data/awx user | AWX_USER ;
            kv/data/awx pw | AWX_PASSWORD ;
  
      - name: Query AWX for Job Template
        id: query_job_template
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
          JOB_TEMPLATE_NAME: ${{ inputs.awx-job-template-name }}
        run: |
          RESPONSE=$(curl -s -u "$AWX_USER:$AWX_PW" \
            -H "Content-Type: application/json" \
            "https://$AWX_HOST/api/v2/job_templates/?name=${JOB_TEMPLATE_NAME}")

          JOB_TEMPLATE_ID=$(echo "$RESPONSE" | jq -r '.results[0].id')
        
          if [ "$JOB_TEMPLATE_ID" = "null" ] || [ -z "$JOB_TEMPLATE_ID" ]; then
            echo "Error: No job template found with name ${JOB_TEMPLATE_NAME}" >&2
            exit 1
          fi

          echo "Found job template ID: $JOB_TEMPLATE_ID"
          echo "job_template_id=$JOB_TEMPLATE_ID" >> $GITHUB_OUTPUT
    
      - name: Launch AWX Job Template
        id: launch_job
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        run: |
          JOB_TEMPLATE_ID="${{ steps.query_job_template.outputs.job_template_id }}"
          LAUNCH_RESPONSE=$(curl -L -s -u "$AWX_USER:$AWX_PW" \
            -H "Content-Type: application/json" \
            -X POST \
            -d '{}' \
            "https://$AWX_HOST/api/v2/job_templates/${JOB_TEMPLATE_ID}/launch/")

          JOB_ID=$(echo "$LAUNCH_RESPONSE" | jq -r '.job')
          if [ "$JOB_ID" = "null" ] || [ -z "$JOB_ID" ]; then
            echo "Error: No job ID returned in launch response." >&2
            exit 1
          fi
          echo "Launched Job ID: $JOB_ID"
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Poll for Job Status
        env:
          AWX_HOST: ${{ steps.import-secrets.outputs.AWX_HOST }}
          AWX_USER: ${{ steps.import-secrets.outputs.AWX_USER}}
          AWX_PW: ${{ steps.import-secrets.outputs.AWX_PASSWORD }}
        run: |
          JOB_ID="${{ steps.launch_job.outputs.job_id }}"
          echo "Polling AWX for status of Job ID: $JOB_ID"
          STATUS=""
          # Poll every 10 seconds, up to a maximum of 30 minutes (180 iterations)
          for i in {1..180}; do
            RESPONSE=$(curl -s -u "$AWX_USER:$AWX_PW" \
              -H "Content-Type: application/json" \
              "https://$AWX_HOST/api/v2/jobs/$JOB_ID/")

            STATUS=$(echo "$RESPONSE" | jq -r '.status')
            
            if [[ "$STATUS" == "successful" || "$STATUS" == "failed" || "$STATUS" == "error" ]]; then
              break
            fi
            sleep 10
          done

          if [ "$STATUS" != "successful" ]; then
            echo "Job did not complete successfully. Final status: $STATUS"
            exit 1
          else
            echo "Job completed successfully. Final status: $STATUS"
          fi
